{"version":3,"sources":["AppStyled.js","components/Main/MainStyled.js","components/LettersInput/LettersInputStyled.js","components/LettersInput/LettersInput.js","components/ResultDisplay/ResultDisplayStyled.js","components/ResultDisplay/ResultItemStyled.js","components/ResultDisplay/ResultItem.js","components/ResultDisplay/ResultDisplay.js","utils/getPermutations.js","utils/constants.js","utils/isValidWord.js","utils/getValidPermutations.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["AppStyled","styled","div","_templateObject","MainStyled","MainStyled_templateObject","LettersInputStyled","input","LettersInputStyled_templateObject","LettersInput","_ref","onChange","react_default","a","createElement","type","placeholder","ResultDisplayStyled","p","ResultDisplayStyled_templateObject","EmptyResultDisplayStyled","_templateObject2","LettersDisplayStyled","span","_templateObject3","ResultItemStyled","ResultItemStyled_templateObject","ResultItem","word","href","concat","ResultDisplay","letters","permutations","length","map","i","key","ResultItem_ResultItem","MIN_WORD_LENGTH","getPermutations","lettersString","saneString","substr","results","_loop","combinations","indices","run","level","join","Object","keys","dictionary","Typo","dictionaryPath","isValidWord","check","bind","getValidPermutations","filter","Main","_useState","useState","_useState2","slicedToArray","setLetters","toLowerCase","LettersInput_LettersInput","value","target","toUpperCase","ResultDisplay_ResultDisplay","App","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28bb2367.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AppStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  height: 80vh;\n`;\n","import styled from \"styled-components\";\n\nexport const MainStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n\n  padding: 40px;\n\n  width: 800px;\n  max-width: 80vw;\n\n  background: #32302f;\n`;\n","import styled from \"styled-components\";\n\nexport const LettersInputStyled = styled.input`\n  font-size: 36px;\n  background: #f9f5d7;\n`;\n","import React from \"react\";\nimport { LettersInputStyled } from \"./LettersInputStyled\";\n\nexport const LettersInput = ({ onChange }) => (\n  <LettersInputStyled\n    type=\"text\"\n    placeholder=\"Type in your letters, e.g. AWESOME\"\n    onChange={onChange}\n  />\n);\n","import styled from \"styled-components\";\n\nexport const ResultDisplayStyled = styled.p`\n  margin: 32px 0 0;\n  color: #d5c4a1;\n  font-size: 24px;\n  line-height: 1.5;\n`;\n\nexport const EmptyResultDisplayStyled = styled.p`\n  margin-top: 32px;\n  color: #fabd2f;\n  font-size: 24px;\n`;\n\nexport const LettersDisplayStyled = styled.span`\n  color: #8ec07c;\n`;\n","import styled from \"styled-components\";\n\nexport const ResultItemStyled = styled.a`\n  color: #b8bb26;\n`;\n","import React from \"react\";\nimport { ResultItemStyled } from \"./ResultItemStyled\";\n\nexport const ResultItem = ({word}) => (\n  <ResultItemStyled href={`https://en.wiktionary.org/wiki/${word}`}>\n    {word}\n  </ResultItemStyled>\n);\n","import React from \"react\";\nimport {\n  ResultDisplayStyled,\n  EmptyResultDisplayStyled,\n  LettersDisplayStyled\n} from \"./ResultDisplayStyled\";\nimport { ResultItem } from \"./ResultItem\";\nimport { MIN_WORD_LENGTH } from \"utils/constants\";\n\nexport const ResultDisplay = ({ letters, permutations }) =>\n  permutations.length ? (\n    <ResultDisplayStyled>\n      Permutations of <LettersDisplayStyled>{letters}</LettersDisplayStyled>{\" \"}\n      which are valid English words:{\" \"}\n      {permutations.map((word, i) => (\n        <span key={word}>\n          <ResultItem word={word} />\n          {i < permutations.length - 1 && \", \"}\n        </span>\n      ))}\n    </ResultDisplayStyled>\n  ) : (\n    <EmptyResultDisplayStyled>\n      There are no permutations of{\" \"}\n      <LettersDisplayStyled>{letters}</LettersDisplayStyled> which are longer\n      than {MIN_WORD_LENGTH - 1} and valid English words.\n    </EmptyResultDisplayStyled>\n  );\n","import { MIN_WORD_LENGTH } from \"./constants\";\n\nexport const getPermutations = lettersString => {\n  const saneString = lettersString.substr(0, 7);\n  const results = {};\n  for (\n    let length = saneString.length;\n    length >= MIN_WORD_LENGTH;\n    length--\n  ) {\n    const combinations = [];\n    const indices = [];\n\n    const run = level => {\n      for (let i = 0; i < saneString.length; i++) {\n        if (!indices[i]) {\n          indices[i] = true;\n          combinations[level] = saneString[i];\n          if (level < length - 1) {\n            run(level + 1);\n          } else {\n            results[combinations.join(\"\")] = true;\n          }\n          indices[i] = false;\n        }\n      }\n    };\n    run(0);\n  }\n  return Object.keys(results);\n};\n","export const MIN_WORD_LENGTH = 3;","import Typo from \"typo-js\";\n\nconst dictionary = new Typo(\"en_US\", false, false, { dictionaryPath: \"dictionaries\" });\n\nexport const isValidWord = dictionary.check.bind(dictionary);","import { getPermutations } from \"./getPermutations\";\nimport { isValidWord } from \"./isValidWord\";\n\nexport const getValidPermutations = lettersString =>\n  getPermutations(lettersString).filter(isValidWord);\n","import React, { useState } from \"react\";\nimport { MainStyled } from \"./MainStyled\";\nimport { LettersInput } from \"components/LettersInput/LettersInput\";\nimport { ResultDisplay } from \"components/ResultDisplay/ResultDisplay\";\nimport { getValidPermutations } from \"utils/getValidPermutations\";\nimport { MIN_WORD_LENGTH } from \"utils/constants\";\n\nexport const Main = () => {\n  const [letters, setLetters] = useState(\"AWESOME\");\n  const permutations = getValidPermutations(letters.toLowerCase());\n  return (\n    <MainStyled>\n      <LettersInput\n        onChange={({ target: { value } }) =>\n          value.length >= MIN_WORD_LENGTH && setLetters(value.toUpperCase())\n        }\n      />\n      <ResultDisplay letters={letters} permutations={permutations} />\n    </MainStyled>\n  );\n};\n","import React from \"react\";\nimport { AppStyled } from \"./AppStyled\";\nimport { Main } from \"components/Main/Main\";\n\nfunction App() {\n  return (\n    <AppStyled>\n      <Main />\n    </AppStyled>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { getValidPermutations } from \"./utils/getValidPermutations\";\nimport { getPermutations } from \"./utils/getPermutations\";\nimport { isValidWord } from \"./utils/isValidWord\";\n\nwindow.getValidPermutations = getValidPermutations;\nwindow.getPermutations = getPermutations;\nwindow.isValidWord = isValidWord;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}